global(VERSION_saker.util) = "0.8.2"

global(TOOLS_OPTIONS) = [
	{
		Identifier: jdk8,
		SourceVersion: RELEASE_8,
		TargetVersion: RELEASE_8,
		SDKs: {
			Java: saker.java.sdk(8),
		},
	},
	{
		Identifier: jdk9,
		SDKs: {
			Java: saker.java.sdk(9),
		},
	},
]

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

static(TARGET_JDKS) = [
	{
		Id: jdk8,
		Major: 8,
	},
	{
		Id: jdk9,
		Major: 9,
	},
]

compile(
	in jdk = jdk8,
	out javac,
) {
	$javac = saker.java.compile(
		SourceDirectories: [
			src/common, 
			"src/{ $jdk }"
		],
		ClassPath: [
			saker.java.classpath.bundle(nest.dependency.resolve(
				[
					saker.rmi-api,
					saker.apiextract-api,
				],
				Filters: nest.dependency.filter.compile(CompileTransitive: false)
			))
		],
		Identifier: "main-{ $jdk }",
		CompilerOptions: global(TOOLS_OPTIONS)
	)
}
export(
	out javac,
	out jar,
	out sourcesjar,
	
	out bundlepaths = [
		$jar[Path],
		$sourcesjar[Path],
	],
){
	$multireleasecontents = foreach $jdk in static(TARGET_JDKS) with 
			$compile = compile(jdk: $jdk[Id]),
			$javac = $compile[javac] : {
		$jdk[Major]: {
			Resources: [
				{
					Directory: $javac[ClassDirectory],
					Resources: **
				}
			]
		}
	}
	
	$compile = compile()
	$javac = $compile[javac]
	$jar = saker.jar.create(
		Output: saker.util.jar,
		Resources: [
			{
				Directory: res/,
				Resources: **,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		MultiReleaseContents: $multireleasecontents,
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.util-v{ global(VERSION_saker.util) }",
				Nest-Bundle-Source: "saker.util-sources-v{ global(VERSION_saker.util) }",
			},
		},
	)
	$sourcesjar = saker.jar.create(
		Output: saker.util-sources.jar,
		MultiReleaseContents: {
			8: {
				Resources: [
					{
						Directory: [
							src/jdk8/,
							src/common,
						],
						Resources: **/*.java,
					},
					{
						Files: LICENSE,
						TargetDirectory: META-INF,
					},
				]
			},
			9: {
				Resources: [
					{
						Directory: src/jdk9/,
						Resources: **/*.java,
					}
				]
			},
		},
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.util-sources-v{ global(VERSION_saker.util) }",
			},
		},
	)
}
install(){
	$export = export()
	nest.local.install($export[bundlepaths])
}
upload() {
	$export = include(export, Path: saker.build)
	include(Path: secret/secrets.build)
	nest.server.upload(
		Bundles: $export[bundlepaths],
		APIKey: global(saker.util.UPLOAD_API_KEY),
		APISecret: global(saker.util.UPLOAD_API_SECRET),
		Overwrite: true,
	)
}
test(
	in jreversion = 8,
){
	# TODO remove saker.build-test-utils dependency
	$compile = compile()
	$testcompile = saker.java.compile(
		SourceDirectories: test/src/,
		ClassPath: [
			$compile[javac],
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
			]),
		],
		Identifier: tests
	)
	
	$test = saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: $compile[javac],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath: [
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
			]),
		],
		TestClasses: [
			**.*Test
		],
		NonDeterministicTests: **,
		TestInvokerParameters: {
			TimeoutMillis: 120000,
		},
		WorkingDirectory: test/resources/,
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
		JavaSDK: saker.java.sdk($jreversion),
	)
}
testjava8(){
	test(jreversion: 8)
}
testjava9(){
	test(jreversion: 9)
}
testjava10(){
	test(jreversion: 10)
}
testjava11(){
	test(jreversion: 11)
}
testjava12(){
	test(jreversion: 12)
}
testjava13(){
	test(jreversion: 13)
}
testjava14(){
	test(jreversion: 14)
}
testjava15(){
	test(jreversion: 15)
}